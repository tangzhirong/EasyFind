#-*- coding:utf-8 -*-
'''
Created on 2015年10月13日

@author: toot
'''

from django.shortcuts import render_to_response,get_object_or_404
from django.http import HttpResponse,HttpResponseRedirect
from django.shortcuts import render
from lib.final_logger import FinalLogger
from EasyFind.config import LOG_PATH
from django import forms
import datetime
import time
import tasks
import personal_info
import os
import json
import base64
import sse
import time
from django_sse.redisqueue import send_event


#django sse
from django.views.generic import TemplateView
from django_sse.redisqueue import RedisQueueView
from django_sse.views import BaseSseView
from django.http import StreamingHttpResponse

#class HomePage(TemplateView):
  #  template_name = 'index.html'

#class SSE(RedisQueueView):
 #   pass

logname = os.path.join(LOG_PATH,'sse.log')
mylog = FinalLogger.getLogger(logname)

#websocket
from ws4redis.publisher import RedisPublisher
from ws4redis.redis_store import RedisMessage


def event_stream():
    while True:
        mylog.info("----------")
        time.sleep(2)
        yield 'data:%s\n\n' % 'ssss'

def sse_request(request):
    mylog.info("******")
    while True:
        yield HttpResponse(
	'data:%s\n\n' % 'ssss',
	content_type = 'text/event-stream')

class MySseStreamView(BaseSseView):
    def iterator(self):
        while True:
            self.sse.add_message("time", str(time.time()))
            yield
            time.sleep(1)

#class SSE(RedisQueueView):
    #def get_redis_channel(self):
        #return "sse_%s" % self.request.user.username

#loginForm
class loginForm(forms.Form):
    account = forms.CharField()
    password = forms.CharField()

class logonForm(forms.Form):
    account = forms.CharField()
    password = forms.CharField()
    gender = forms.CharField()
    nickname = forms.CharField()
    phone = forms.CharField()
    email = forms.CharField()
    province = forms.CharField()
    city = forms.CharField()
    picture = forms.ImageField()

#主页
def index(request):
    # user = personal_info.models.User.objects(account=a).first()
    # publisher_id = str(user._id)
    # my_tasks = tasks.models.Task.objects(publisher=publisher_id).as_pymongo()
    account = request.COOKIES.get('account','')
    if account:
        user = personal_info.models.User.objects(account=account).first()
        publisher_id = str(user._id)
        my_tasks = tasks.models.Task.objects(publisher=publisher_id).as_pymongo()
        all_tasks = tasks.models.Task.objects()
        join_tasks = tasks.models.Task.objects.filter(participates__contains=publisher_id).as_pymongo()
        return render(request,"index.html",{'my_tasks':my_tasks,'all_tasks':all_tasks,'user':user,'join_tasks':join_tasks,'info':'欢迎使用！','view_info':'none'})
    else:
        all_tasks = tasks.models.Task.objects()
        return render(request,"index.html",{'all_tasks':all_tasks,'info':'请先登录!','view_info':'','logout':'none'})

def user_page(request,a):
    account = request.COOKIES.get('account','')
    if account == a:
        user = personal_info.models.User.objects(account=a).first()
        publisher_id = str(user._id)
        my_tasks = tasks.models.Task.objects(publisher=publisher_id).as_pymongo()
        all_tasks = tasks.models.Task.objects()
        join_tasks = tasks.models.Task.objects.filter(participates__contains=publisher_id).as_pymongo()
        return render(request,"index.html",{'my_tasks':my_tasks,'all_tasks':all_tasks,'user':user,'join_tasks':join_tasks,'info':'欢迎使用！','view_info':'none'})
    else:
        return HttpResponse('非法访问！')

#登录
def login(request):
    if request.method == 'POST':
        form = loginForm(request.POST)
        if form.is_valid():
            account = form.cleaned_data['account']
            password = form.cleaned_data['password']
            user=personal_info.models.User.objects(account=account,password=password).first()
            if user:
                account = str(user.account)
                response = HttpResponseRedirect("/"+account)
                #将account写入cookie，失效时间为3600
                response.set_cookie('account',account,3600)
                return response
            else:
                # return HttpResponseRedirect("/")
                # print "Invalid user"
                return render(request,"login.html",{'res':"账号或密码错误"})
        else:
            return HttpResponseRedirect("/")

    else:
        form = loginForm()
        return render(request,"login.html",{'form':form})

#注册
def logon(request):
    if request.method == 'POST':
        form = logonForm(request.POST,request.FILES)
        if form.is_valid():
            account = form.cleaned_data['account']
            password = form.cleaned_data['password']
            gender = form.cleaned_data['gender']
            nickname = form.cleaned_data['nickname']
            picture = form.cleaned_data['picture']
            phone = form.cleaned_data['phone']
            email = form.cleaned_data['email']
            province = form.cleaned_data['province']
            city = form.cleaned_data['city']
            newuser = personal_info.models.User(account=account,password=password,gender=gender,nickname=nickname,phone=phone,email=email,province=province,city=city)
            newuser.picture = picture
            newuser.save()
            picUrl = base64.b64encode(newuser.picture.read())
            user_temp = personal_info.models.User.objects(account=account).first()
            uid = str(user_temp._id)
            personal_info.models.User.objects(_id=uid).update_one(set__picUrl=picUrl)
            return HttpResponseRedirect("/login")
        else:
            # return HttpResponseRedirect("/logon")
            return render(request,"logon.html",{'res':"注册失败"})
    else:
        form = logonForm()
        return render(request,"logon.html",{'form':form})

def logout(request):
    response = HttpResponseRedirect("/login")
    response.delete_cookie('account')
    return response

#竞价信息处理
def task_deliver(request):
    response = HttpResponse()
    response['Content-Type']="text/javascript"
    account = request.POST.get("account","")
    taskName = request.POST.get("taskName","")
    money = request.POST.get("money","")
    publisher = personal_info.models.User.objects(account=account).first()
    publisher_id = str(publisher._id)
    task = tasks.models.Task.objects(name=taskName).first()
    task_id = str(task._id)
    #判断是否已经上报竞价数据，如已上报，返回提醒
    isDeliver = tasks.models.Task_deliver.objects(task=task_id,user=publisher_id).first()
    if isDeliver:
        ret = 'hasDeliver'
        response.write(ret)
        return response
    if account and taskName:
        #保存竞价信息
        deliver = tasks.models.Task_deliver(task=task_id,user=publisher_id,money=money)
        deliver.save()
        #如果任务已分配，检查任务剩余悬赏，如能满足，分配任务给他
        if task.isDeliver=='已分配' and task.money_left>=int(money):
            #将用户写入任务参与者列表中
            pid=[]
            p = personal_info.models.User.objects(account=account).as_pymongo()[0]
            pid.append(p['_id'])
            tasks.models.Task.objects(_id=task_id).update_one(push_all__participates=pid)
            users_name = []
            u = personal_info.models.User.objects(_id=p['_id']).first()
            users_name.append(u.nickname)
            tasks.models.Task.objects(_id=task_id).update_one(push_all__participates_name=users_name)
            #更新任务剩余悬赏
            m = task.money_left-int(money)
            tasks.models.Task.objects(_id=task_id).update_one(set__money_left=m)
            ret = 'taskOk'
            response.write(ret)
            return response
        elif task.isDeliver=='已分配' and task.money_left<int(money):
            ret = 'moneyWrong'
            response.write(ret)
            return response
        else:
            ret = 'deliverOk'
            response.write(ret)
            return response
    else:
        response.write("no enough params")
        return response

#退出参与的任务
def task_out(request):
    response = HttpResponse()
    response['Content-Type']="text/javascript"
    account = request.POST.get("account","")
    taskName = request.POST.get("taskName","")
    publisher = personal_info.models.User.objects(account=account).as_pymongo()[0]
    pid = []
    users_name = []
    pid.append(publisher['_id'])
    task = tasks.models.Task.objects(name=taskName).first()
    task_id = str(task._id)
    tasks.models.Task.objects(_id=task_id).update_one(pull_all__participates=pid)
    u = personal_info.models.User.objects(_id=publisher['_id']).first()
    uid = str(u._id)
    users_name.append(u.nickname)
    tasks.models.Task.objects(_id=task_id).update_one(pull_all__participates_name=users_name)
    deliver = tasks.models.Task_deliver.objects(task=task_id,user=uid).as_pymongo()[0]
    m = task.money_left+deliver['money']
    tasks.models.Task.objects(_id=task_id).update_one(set__money_left=m)
    ret = '已退出该任务！'
    response.write(ret)
    return response

#完结任务
def task_over(request):
    response = HttpResponse()
    response['Content-Type']="text/javascript"
    taskName = request.POST.get("taskName","")
    task = tasks.models.Task.objects(name=taskName).first()
    task_id = str(task._id)
    tasks.models.Task.objects(_id=task_id).update_one(set__status='已完结')
    ret = '任务已完结！'
    response.write(ret)
    #data = 'sssssss'
    #send_event('myevent', json.dumps(data))
    #send_event('myevent', json.dumps(data), 'sse_%s' % user.username)
    #sse.Sse().add_message("myevent","sssss")
    #send_event("myevent", "mydata", channel="foo")
    try:
        redis_publisher = RedisPublisher(facility='foobar', broadcast=True)
        message = RedisMessage('Hello World')
    # and somewhere else
        redis_publisher.publish_message("easyfind:task:tzr",message)
    except Exception as e:
        mylog.info("..............."+str(e))
    return response

#获取任务位置信息
def getLocation(request):
    response = HttpResponse()
    response['Content-Type']="json/javascript"
    taskName = request.POST.get("taskName","")
    task = tasks.models.Task.objects(name=taskName).first()
    task_id = str(task._id)
    result = tasks.models.Task_result.objects(task=task_id).as_pymongo()
    ret = result.to_json()
    #搜索该任务计算结果表的最新记录，返回到ret
    # position = {'x1':117.10000,'y1':40.13000,'time1':'2016/01/05 12:05','x2':117.20000,'y2':40.15010,'time2':'2016/01/05 12:13'}
    #ret = json.dumps(position, ensure_ascii=False)
    # ret = json.dumps(result, ensure_ascii=False)
    response.write(ret)
    return response

#测试redis
def test(request):
	print('kkkk')
	#return render(request,"tasks/index.html")
	return render_to_response('test.html')
