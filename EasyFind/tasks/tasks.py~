from __future__ import absolute_import

from celery import shared_task

from django.shortcuts import render
from django.shortcuts import render_to_response,get_object_or_404
from django.http import HttpResponse,HttpResponseRedirect
from django import forms
from . import models
import personal_info
import devices
import time

import json
from django_sse.redisqueue import send_event

#websocket
from ws4redis.publisher import RedisPublisher
from ws4redis.redis_store import RedisMessage

@shared_task
def deliverTask(task_id,task_temp):
    #服务器sleep(5min),等待竞价数据的获取
    time.sleep(60)
    #查询该任务所有的竞价数据
    task_delivers = models.Task_deliver.objects(task=task_id).as_pymongo()
    users=[]
    users_account = []
    #users_weight=[]
    money=0
    i=0
    # 执行竞价算法：基于先到先得、排除歧点的冒泡排序思路
    for task_deliver in task_delivers:
        user = personal_info.models.User.objects(_id=task_deliver['user']).first()
        #定义用户权重
        weight = user['reputation']-task_deliver['money']
        if i>0:
            if weight >weight_temp:
                if money<task_temp.reward:
                    users.append(task_deliver['user'])
                    users_account.append(user.account)
                    money += task_deliver['money']
            else:
                if money<task_temp.reward:
                    users.append(deliver_ttemp['user'])
                    users_account.append(user_wtemp.account)
                    money += deliver_ttemp['money']
                    user_wtemp = user
                    weight_temp = weight
                    deliver_ttemp = task_deliver
        else:
            user_wtemp = user
            weight_temp = weight
            deliver_ttemp = task_deliver
        i +=1
    #处理最后一个竞争者
    if task_delivers:
        if money<=task_temp.reward-deliver_ttemp['money']:
            users.append(deliver_ttemp['user'])
            users_account.append(user_wtemp.account)
            money += deliver_ttemp['money']


    #按排名将task_deliver.user push到该任务的participates里
    models.Task.objects(_id=task_id).update_one(push_all__participates=users)
    users_name=[]
    for user in users:
        p = personal_info.models.User.objects(_id=user).first()
        users_name.append(p.nickname)
    models.Task.objects(_id=task_id).update_one(push_all__participates_name=users_name)

    #修改该任务的剩余金额和状态
    models.Task.objects(_id=task_id).update_one(set__money_left=task_temp.reward-money)
    models.Task.objects(_id=task_id).update_one(set__isDeliver='已分配')
    if users:
        models.Task.objects(_id=task_id).update_one(set__status='监测中')
    
    redis_publisher = RedisPublisher(facility='foobar', broadcast=True)
    task = models.Task.objects(_id=task_id).first()
    message = RedisMessage('Task'+task.name+'is delivered to you!')
    #print(users_account[0])
    # and somewhere else
    redis_publisher.publish_message(users_account,message)


